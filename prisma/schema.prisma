// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  name               String?
  subjects           Subject[]
  RepetitionCalendar RepetitionCalendar[]
}

model Subject {
  id        String    @id @default(uuid())
  name      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  chapters  Chapter[]
  createdAt DateTime  @default(now())
}

model Chapter {
  id                 String              @id @default(uuid())
  title              String
  subject            Subject             @relation(fields: [subjectId], references: [id])
  subjectId          String
  notes              String?
  flashcards         Flashcard[]
  createdAt          DateTime            @default(now())
  lastRevised        DateTime?           @default(now())
  MindMap            MindMap?
  RepetitionCalendar RepetitionCalendar?
}

model Flashcard {
  id        String  @id @default(uuid())
  question  String
  answer    String
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String
}

model MindMap {
  id          String   @id @default(uuid())
  chapterId   String   @unique
  chapter     Chapter  @relation(fields: [chapterId], references: [id])
  mindMapData Json // Store the mind map data (structure, nodes, edges) as JSON
  createdAt   DateTime @default(now())
}

model RepetitionCalendar {
  id        String  @id @default(uuid())
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String  @unique
  dates     Json

  createdAt DateTime @default(now())
  userId    String   
  user      User     @relation(fields: [userId], references: [id])
}

